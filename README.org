* Bash-Utils

* Optparse
A BASH wrapper for getopts, for simple command-line argument parsing

*** ( ! ) ATTENTION MAC USERS
Optparse requires `gnu-sed` instead of the default Mac version of sed, which you can do with the following:
=brew install gnu-sed --with-default-names
=

** What is this?
A wrapper that provides a clean and easy way to parse arguments to your BASH scripts. It lets you define short and long option names, handle flag variables, and set default values for optional arguments, all while aiming to be as minimal as possible: *One line per argument definition*.

** Usage
**** See `sample_head.sh` for a demonstration of optparse
*** 1. Define your arguments

Each argument to the script is defined with `optparse.define`, which specifies the option names, a short description, the variable it sets and the default value (if any). 

=bash
optparse.define short=f long=file desc="The input file" variable=filename
=

Flags are defined in exactly the same way, but with an extra parameter `value` that is assigned to the variable. 

=bash
optparse.define short=v long=verbose desc="Set flag for verbose mode" variable=verbose_mode value=true default=false
=    

*** 2. Evaluate your arguments
The `optparse.build` function creates a temporary header script based on the provided argument definitions. Simply source the file the function returns, to parse the arguments.

=bash
source $( optparse.build )
=

*** That's it!
The script can now make use of the variables. Running the script (without any arguments) should give you a neat usage description.
    
    usage: ./script.sh [OPTIONS]
    
    OPTIONS:
    
        -f --file  :  The input file
    	-v --verbose  :  Set flag for verbose mode
    
    	-? --help  :  usage
        
** Supported definition parameters
All definition parameters for `optparse.define` are provided as `key=value` pairs, seperated by an `=` sign.
*** `short`
a short, single-letter name for the option
**** `long`
a longer expanded option name
**** `variable`
the target variable that the argument represents
**** `value`(optional)
the value to set the variable to. If unspecified, user is expected to provide a value.
**** `desc`(optional)
a short description of the argument (to build the usage description)
**** `default`(optional)
the default value to set the variable to if argument not specified

** Installation
1. Download/clone `optparse.bash`
2. Add 

=bash    
`source /path/to/optparse.bash` 
=
to `~/.bashrc`

* ANSI Code Generator

This bash script will generate the proper ANSI escape sequences to move the cursor around the screen, make text bold, add colors and do much more.  It is designed to help you colorize words and bits of text.

If it helps, you can think of it as a curses / ncurses library for bash, or a tool that helps you using tricks from DOS's ANSI.SYS.  Or you might consider this to be your magic highlighter that has always been missing from bash.


** Installation

Download `ansi` and put it somewhere in your path.  Make sure that it is executable (`chmod a+x ansi` works well).  Bash will need to be present, but it is often installed by default.  No external commands are used; this only uses bash's built-in features.

   1. Download
    curl -OL git.io/ansi

    2. Make executable
    chmod 755 ansi

    3. Copy to somewhere in your path
    sudo mv ansi /usr/local/bin/
   

Not all features will work with all terminals.  Your terminal determines if particular codes work.


** Usage

    ansi [OPTIONS] [TEXT TO DISPLAY]

The OPTIONS are numerous and are detailed below.  You can specify as many as you like.  Option processing stops at the first unknown option and at `--`.  Options are applied in the order specified on the command line.  When colors are changed, they are removed in reverse order as long as `--no-restore`  is not used.


** Examples

Here's a few quick examples to get you started.

    1. Write "Tests pass" in green on its own line
    ansi --green --newline "Tests pass"

    2. Change the terminal's title to the working directory
    ansi --title="$(pwd)"

    3. Reset the terminal colors and move the cursor to row 1 column 1
    4. and show the cursor if it was previously hidden.
    5. This is the same as the --reset option.
    ansi --erase-display=2 --reset-all --position=1,1 --show-cursor

    6. Find out how many lines the terminal can display
    ansi --report-window-chars | cut -d , -f 1


** Options - Display Manipulation

The short version of these options comes from the command they are implementing.

- `--insert-chars[=N]`, `--ich[=N]` - Insert blanks at cursor, shifting the line right.
- `--erase-display[=N]`, `--ed[=N]` - Erase in display. 0=below, 1=above, 2=all, 3=saved.
- `--erase-line[=N]`, `--el[=N]` - Erase in line. 0=right, 1=left, 2=all.
- `--insert-lines[=N]`, `--il[=N]`
- `--delete-lines[=N]`, `--dl[=N]`
- `--delete-chars[=N]`, `--dch[=N]`
- `--scroll-up[=N]`, `--su[=N]`
- `--scroll-down[=N]`, `--sd[=N]`
- `--erase-chars[=N]`, `--ech[=N]`
- `--repeat[=N]`, `--rep[=N]` - Repeat preceding character N times.


** Options - Cursor

The short version of these options comes from the command they are implementing.

- `--up[=N]`, `--cuu[=N]`
- `--down[=N]`, `--cud[=N]`
- `--forward[=N]`, `--cuf[=N]`
- `--backward[=N]`, `--cub[=N]`
- `--next-line[=N]`, `--cnl[=N]`
- `--prev-line[=N]`, `--cpl[=N]`
- `--column[=N]`, `--cha[=N]`
- `--position[=ROW][=COL]`, `--cup[=ROW][=COL]`
- `--tab-forward[=N]` - Move forward N tab stops.
- `--tab-backward[=N]` - Move backward N tab stops.
- `--column-relative[=N]`, `--hpr[=N]`
- `--line[=N]`, `--vpa[=N]`
- `--line-relative[=N]`, `--vpr[=N]`
- `--save-cursor` - Saves the cursor position.  By default, this will restore the cursor after writing text to the terminal unless you use `--no-restore`.
- `--restore-cursor` - This just restores the cursor position.  Normally this executes at the end when you use `--save-cursor`.
- `--hide-cursor` - This also will show the cursor at the end unless you use `--no-restore`.
- `--show-cursor`


** Options - Colors (Attributes)

All of these options will automatically reset to normal text unless `--no-reset` is used.

- `--bold`
- `--faint`
- `--italic`
- `--underline`
- `--blink`
- `--inverse`
- `--invisible`
- `--strike`
- `--fraktur`
- `--double-underline`
- `--frame`
- `--encircle`
- `--overline`


** Options - Colors (Foreground)

All of these options will automatically reset to the default color unless `--no-reset` is used.

- `--black`
- `--red`
- `--yellow`
- `--blue`
- `--magenta`
- `--cyan`
- `--white`
- `--black-intense`
- `--red-intense`
- `--yellow-intense`
- `--blue-intense`
- `--magenta-intense`
- `--cyan-intense`
- `--white-intense`


** Options - Colors (Background)

All of these options will automatically reset to the default color unless `--no-reset` is used.

- `--bg-black`
- `--bg-red`
- `--bg-yellow`
- `--bg-blue`
- `--bg-magenta`
- `--bg-cyan`
- `--bg-white`
- `--bg-black-intense`
- `--bg-red-intense`
- `--bg-yellow-intense`
- `--bg-blue-intense`
- `--bg-magenta-intense`
- `--bg-cyan-intense`
- `--bg-white-intense`


** Options - Colors (Reset)

These options force a reset of colors.  This is useful if you used `--no-reset` or are correcting the appearance of a misbehaving terminal.

- `--reset-attrib` - Reset all attributes
- `--reset-foreground` - Reset the foreground to default
- `--reset-background` - Reset the background to default
- `--reset-color` - Reset all color-related settings


** Reporting

All of these commands send a special code to the terminal.  The terminal responds as though someone typed something very fast.  In order for these to work, `ansi` must read from stdin directly.  This won't work if you are piping in a file or replace stdin in another way.

All output is written to screen.

- `--report-position` - ROW,COL
- `--report-window-state` - "open" or "iconified"
- `--report-window-position` - X,Y
- `--report-window-pixels` - HEIGHT,WIDTH
- `--report-window-chars` - ROWS,COLS
- `--report-screen-chars` - ROWS,COLS (this is for the entire screen)
- `--report-icon`
- `--report-title`


** Miscellaneous

- `--color-table` - Display a color table
- `--icon=NAME` - Set the icon
- `--title=TITLE` - Set the title of the terminal.  The equals (=) before the `TITLE` parameter is mandatory.  `TITLE` can be empty.
- `--no-restore` - Do not issue reset codes when changing colors and saving the cursor.  For example, if you use `--green` then the text will automatically be reset to the default color when the command terminates.  With `--no-restore` set, the text will stay green and subsequent commands that output will keep writing in green until something else changes the terminal.
- `-n`, `--newline` - Add a newline at the end.
- `--escape` - Allow text passed in to contain escape sequences.
- `--bell` - Add the terminal's bell sequence to the output.
- `--reset` - Reset all colors, clear the screen, show the cursor and move to 1,1.



License
-------

This project is licensed under a MIT style license with an additional non-advertising clause.  See [LICENSE.md](LICENSE.md) for more information.

curlbash: locally save and checksum/review before curl|bash-ing installers

* curlbash

Installing things by curling them to a shell probably isn't a great
practice security-wise, but several things can make it a little better.
This script caches the curl'd installer, can optionally verify a
checksum, and give the user a chance to review what was downloaded
before executing it. Consider it harm reduction for the command line.

curlbash is distributed under the ISC license.


* Dependencies

curlbash uses SHA-256 for hashing. It will check for `sha256` or
`shasum`, and use whichever is in the path. It also requires `curl`.


* Usage

    Usage: curlbash [-c] [-d] [-e SHA256] [-f | -r] [-h] [-v] URL
      -c           ignore cache
      -d           don't delete cached downloads
      -e SHA256    expect this SHA256, or exit
      -f           fetch and exit
      -h           print this help and exit
      -r           run, without confirmation
      -v           increase verbosity


* Examples

    $ curlbash -h

Print help.

    $ curlbash -f URL

Fetch `URL` (if not cached), cache it locally, and exit. It will be
saved under `/tmp`, with a filename based on the hash of the URL.

    $ curlbash -r -e HASH URL

Download and execute `URL`, but only if the SHA-256 hash for the
downloaded file matches `HASH`.

    $ curlbash -c URL

Re-fetch `URL` (ignoring a locally cached copy), display what was
downloaded, and prompt for confirmation before executing.


* Portability

Despite the name, curlbash is targeted at `/bin/sh` for portability
reasons. A reasonable effort is made to test it with bash, mksh, pdksh,
dash, and other common shells that attempt to be POSIX-compliant /
compatible with the Bourne shell. (In other words, bash-isms are bugs.)
